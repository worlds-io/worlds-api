## SETUP TYPES
#
# The following types are mostly used during setup or getting introspection data
# during runtime, such as rendering a full scene

type Sensor {
	id: ID!
	"""
	Metadata added by the API client
	"""
	metadata(key: String): JSON
}

"""
Filters Sensor objects
"""
input SensorFilterInput {
	id: FilterIDInput
	# TODO: more filter fields
	# TODO: subtype (like positioned, camera) filter fields

	and: [SensorFilterInput!]
	or: [SensorFilterInput!]
	not: SensorFilterInput
}
"""
Provides paging info for a set of Sensors
"""
type SensorConnection { pageInfo: PageInfo!, edges: [SensorEdge!]! }
"""
Provides a single node for an Sensor, including the cursor
"""
type SensorEdge { node: Sensor, cursor: String! }


type PositionedSensor implements Sensor {
	id: ID!
	geoCoordinate: GeoCoordinate
	position: WorldCoordinate!

	metadata(key: String): JSON
}

type Camera implements Sensor & PositionedSensor {
	id: ID!
	geoCoordinate: GeoCoordinate
	position: WorldCoordinate!

	rtspUrl: String

	metadata(key: String): JSON

	# Lens type? Would want to specify a backend processing type and metadata (for handling fisheye lens, etc.)
	# Are these part of the lens type or more basic aspects of the camera?
	# - Aspect Ratio?
	# - FOV?
}

enum CustomSensorDataType {
	FLOAT
	INTEGER
	STRING
	JSON
}

type CustomSensor implements Sensor {
	id: ID!
	dataType: CustomSensorDataType!

	metadata(key: String): JSON
}

type CustomPositionedSensor implements CustomSensor & PositionedSensor {
	id: ID!
	geoCoordinate: GeoCoordinate
	position: WorldCoordinate!

	dataType: CustomSensorDataType!

	metadata(key: String): JSON
}
