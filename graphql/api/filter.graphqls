"""
`FilterIDInput` allows for filtering based on an ID parameter. Only one field should be provided per filter object.
"""
input FilterIDInput {
    """
    If provided, the ID input must not be equivalent to the value provided to match the current filter.
    """
    ne: ID
    """
    If provided, the ID input must be equivalent to the value provided to match the current filter.
    """
    eq: ID
    """
    If provided, the ID input must be present in the value provided to match the current filter.
    """
    in: [ID!]
}

input FilterIDListInput @experimental {
    eq: [ID!]
    in: [ID!]
}

input FilterStringListInput @experimental {
    eq: [String!]
    in: [String!]
}

"""
`FilterIntInput` allows for filtering based on an Int parameter. Only one field should be provided per filter object.
"""
input FilterIntInput {
    """
    If provided, the Int input must not be equal to the value provided to match the current filter.
    """
    ne: Int
    """
    If provided, the Int input must be equal to the value provided to match the current filter.
    """
    eq: Int
    """
    If provided, the Int input must be less than or equal to the value provided to match the current filter.
    """
    le: Int
    """
    If provided, the Int input must be less than the value provided to match the current filter.
    """
    lt: Int
    """
    If provided, the Int input must be greater than or equal to the value provided to match the current filter.
    """
    ge: Int
    """
    If provided, the Int input must be greater than the value provided to match the current filter.
    """
    gt: Int
    """
    If provided, the Int input must be present in the values provided to match the current filter.
    """
    in: [Int!]
    """
    If provided, the Int input must be between the two values provided to match the current filter.
    """
    between: [Int!]
    """
    If provided and true, the filter will pass only if there is a Int in the corresponding field. If provided and false,
    the filter will pass only if there is not a Int in the corresponding field.
    """
    attributeExists: Boolean
}

"""
`FilterFloatInput` allows for filtering based on a Float parameter. Only one field should be provided per filter object.
"""
input FilterFloatInput {
    """
    If provided, the Float input must not be equal to the value provided to match the current filter.
    """
    ne: Float
    """
    If provided, the Float input must be equal to the value provided to match the current filter.
    """
    eq: Float
    """
    If provided, the Float input must be less than or equal to the value provided to match the current filter.
    """
    le: Float
    """
    If provided, the Float input must be less than the value provided to match the current filter.
    """
    lt: Float
    """
    If provided, the Float input must be greater than or equal to the value provided to match the current filter.
    """
    ge: Float
    """
    If provided, the Float input must be greater than the value provided to match the current filter.
    """
    gt: Float
    """
    If provided, the Float input must be present in the values provided to match the current filter.
    """
    in: [Float!]
    """
    If provided, the Float input must be between the two values provided to match the current filter.
    """
    between: [Float!]
    """
    If provided and true, the filter will pass only if there is a Float in the corresponding field. If provided and false,
    the filter will pass only if there is not a Float in the corresponding field.
    """
    attributeExists: Boolean
}

"""
`FilterStringInput` allows for filtering based on a string parameter. Only one field should be provided per filter object.
"""
input FilterStringInput {
    """
    If provided, the string input must not be equivalent to the value provided to match the current filter.
    """
    ne: String
    """
    If provided, the string input must be equivalent to the value provided to match the current filter.
    """
    eq: String
    """
    If provided, the string input must be a case-insensitive substring of the value provided to match the current filter.
    """
    like: String
    """
    If provided, the string input must be present in the value provided to match the current filter.
    """
    in: [String!]
    """
    If provided and true, the filter will pass only if there is a string in the corresponding field. If provided and false, the filter will pass only if there is not a string in the corresponding field.
    """
    attributeExists: Boolean
}

"""
`FilterDateTimeOffsetInput` allows for filtering based on a DateTimeOffset parameter. Only one field should be provided per filter object.
"""
input FilterDateTimeOffsetInput {
    """
    If provided, the DateTimeOffset input must be the same as the value provided to match the current filter.
    """
    eq: DateTimeOffset
    """
    If provided, the DateTimeOffset input must be between the two values provided to match the current filter.
    """
    between: [DateTimeOffset!]
    """
    If provided and true, the filter will pass only if there is a DateTimeOffset in the corresponding field. If provided and false,
    the filter will pass only if there is not a DateTimeOffset in the corresponding field.
    """
    attributeExists: Boolean
}

"""
`FilterBooleanInput` allows for filtering based on a Boolean parameter. Only one field should be provided per filter object.
"""
input FilterBooleanInput {
    """
    If provided, the Boolean input must be the same as the value provided to match the current filter.
    """
    eq: Boolean
    """
    If provided, the Boolean input must not be the same as the value provided to match the current filter.
    """
    ne: Boolean
    """
    If provided and true, the filter will pass only if there is a Boolean in the corresponding field. If provided and false,
    the filter will pass only if there is not a Boolean in the corresponding field.
    """
    attributeExists: Boolean
}

"""FilterPoinInput is used to filter records by their positional values"""
input FilterPointInput {
    """
    If provided, returns records with positions that are inside the specified polygon
    """
    in: GeoJSONPolygonInput
    """
    If provided, returns records that are near the record according to the input
    """
    near: FilterPointNearInput
    """
    If provided and true, the filter will pass only if there is a position in the corresponding field. If provided and false,
    the filter will pass only if there is not a position in the corresponding field.
    """
    attributeExists: Boolean
}

"""
FilterPointNearInput is used to filter records with positional arguments by proximity to the specified point
"""
input FilterPointNearInput {
    """The point from which the distance is being checked"""
    point: GeoJSONPointInput!
    """The maximum distance that the record can be from the point"""
    radius: Float! = 500.0
}

"""
`FilterMessageStateInput` allows for filtering based on a [MessageState]({{Types.messagestate}}) parameter. Only one field should be provided per filter object.
Note that the `UPDATE` state will exclude `START` and `END` messages.
"""
input FilterMessageStateInput {
    """
    If provided, the MessageState must be equal to the value provided to match the current filter.
    """
    eq: MessageState
    """
    If provided, the MessageState must not be equal to the value provided to match the current filter.
    """
    ne: MessageState
    """
    If provided, the MessageState must be present in the list provided to match the current filter.
    """
    in: [MessageState!]
}

"""
`FilterEventValidationStatusInput` allows for filtering based on an event's validation status. Only one field should be provided per filter object.
"""
input FilterEventValidationStatusInput {
    """
    If provided, the event's validation status must be equivalent to the value provided to match the current filter.
    """
    eq: EventValidationStatus
    """
    If provided, the event's validation status must not be equivalent to the value provided to match the current filter.
    """
    ne: EventValidationStatus
    """
    If provided, the event's validation status must be present in the value provided to match the current filter.
    """
    in: [EventValidationStatus!]
    """
    If provided and true, the filter will pass only if the event has a validation status. If provided and false, the filter will pass only if there is no validation status.
    """
    attributeExists: Boolean
}